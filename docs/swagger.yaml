definitions:
  types.BaseResponse:
    properties:
      message:
        type: string
      metadata: {}
    type: object
  types.CreatePostPayload:
    properties:
      content:
        example: Good morning content
        type: string
      image_url:
        example: https://bee-happy-bucket-storage.s3.ap-southeast-1.amazonaws.com/2024-04-25_17-05-00-lisa.jpeg
        type: string
      title:
        example: Good morning
        type: string
    required:
    - content
    - title
    type: object
  types.ErrorEmailAlreadyExists:
    properties:
      error:
        example: user with email dummy@gmail.com already exists
        type: string
    type: object
  types.ErrorLoginResponse:
    properties:
      error:
        example: invalid payload.../ not found, invalid email or password / password
          does not correct, please retry!
        type: string
    type: object
  types.LoginUserPayload:
    properties:
      email:
        example: dummy@gmail.com
        type: string
      password:
        example: dummy_password
        type: string
    required:
    - email
    - password
    type: object
  types.RegisterUserPayload:
    properties:
      date_of_birth:
        example: "2006-01-02"
        type: string
      email:
        example: dummy@gmail.com
        type: string
      first_name:
        example: Hello
        type: string
      last_name:
        example: World
        type: string
      password:
        example: dummy_password
        maxLength: 130
        minLength: 3
        type: string
    required:
    - date_of_birth
    - email
    - first_name
    - last_name
    - password
    type: object
  types.UpdatePostPayload:
    properties:
      content:
        example: Good morning content
        type: string
      image_url:
        example: https://bee-happy-bucket-storage.s3.ap-southeast-1.amazonaws.com/2024-04-25_17-05-00-lisa.jpeg
        type: string
      title:
        example: Good morning
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: thanglearndevops@gmail.com
    name: Thang Phan
    url: http://thangphan.com
  description: Manage feeds, chat with fiends. It also provides endpoints for searching
    feed by keyword
  title: Bee happy API
  version: "1.0"
paths:
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Login by email and password
      parameters:
      - description: Payload of login user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.LoginUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Token
          schema:
            $ref: '#/definitions/types.BaseResponse'
        "400":
          description: Invalid payload [errors]
          schema:
            $ref: '#/definitions/types.ErrorLoginResponse'
      summary: Login
      tags:
      - Auth
  /api/v1/post:
    post:
      consumes:
      - application/json
      description: Create a new post
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/types.CreatePostPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/types.BaseResponse'
      summary: Create a new post
      tags:
      - Post
  /api/v1/post/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a post
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/types.BaseResponse'
      summary: Delete a post
      tags:
      - Post
    get:
      consumes:
      - application/json
      description: Get a post by id
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/types.BaseResponse'
      summary: Get a post
      tags:
      - Post
    patch:
      consumes:
      - application/json
      description: Update a post
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      - description: Post payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/types.UpdatePostPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/types.BaseResponse'
      summary: Update a post
      tags:
      - Post
  /api/v1/post/{id}/like:
    post:
      consumes:
      - application/json
      description: Like post
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/types.BaseResponse'
      summary: Like post
      tags:
      - Post activites
  /api/v1/post/{id}/likes:
    get:
      consumes:
      - application/json
      description: Get total likes
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/types.BaseResponse'
      summary: Get total likes
      tags:
      - Post activites
  /api/v1/post/{id}/unlike:
    post:
      consumes:
      - application/json
      description: Unlike post
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/types.BaseResponse'
      summary: Unlike post
      tags:
      - Post activites
  /api/v1/posts:
    get:
      consumes:
      - application/json
      description: Get all post
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/types.BaseResponse'
      summary: Get all posts
      tags:
      - Post
  /api/v1/register:
    post:
      consumes:
      - application/json
      description: Register with credentials
      parameters:
      - description: Payload of register user account
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/types.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "400":
          description: Email already exists
          schema:
            $ref: '#/definitions/types.ErrorEmailAlreadyExists'
      summary: Register a new account
      tags:
      - Auth
  /api/v1/upload:
    post:
      consumes:
      - application/json
      description: Upload an image for the post/profile
      parameters:
      - description: JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Image file to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.BaseResponse'
      summary: Upload image
      tags:
      - Upload
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
